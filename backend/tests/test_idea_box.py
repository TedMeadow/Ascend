import pytest
from fastapi.testclient import TestClient
from unittest.mock import MagicMock

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from .test_auth import TEST_USER
from .test_tasks import get_auth_headers


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ Idea Box ---

def create_folder(client: TestClient, headers: dict, name: str, icon: str = "üìÅ") -> dict:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –µ–µ –¥–∞–Ω–Ω—ã—Ö."""
    response = client.post("/idea-box/folders/", json={"name": name, "icon": icon}, headers=headers)
    assert response.status_code == 201
    return response.json()


# --- –¢–µ—Å—Ç—ã –¥–ª—è –ú–æ–¥—É–ª—è –ü–∞–ø–æ–∫ (/folders) ---

def test_folder_unauthorized_access(client: TestClient):
    """–¢–µ—Å—Ç: –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–∞–º."""
    response = client.get("/idea-box/folders/")
    assert response.status_code == 401

def test_folder_crud_workflow(client: TestClient):
    """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø–∞–ø–∫–∏ (CRUD)."""
    headers = get_auth_headers(client)

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ
    folder_data = create_folder(client, headers, "Project X")
    folder_id = folder_data["id"]
    assert folder_data["name"] == "Project X"

    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    list_res = client.get("/idea-box/folders/", headers=headers)
    assert list_res.status_code == 200
    assert len(list_res.json()) == 1

    # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    update_res = client.put(f"/idea-box/folders/{folder_id}", json={"name": "Project Y"}, headers=headers)
    assert update_res.status_code == 200
    assert update_res.json()["name"] == "Project Y"
    
    # 4. –£–¥–∞–ª–µ–Ω–∏–µ
    delete_res = client.delete(f"/idea-box/folders/{folder_id}", headers=headers)
    assert delete_res.status_code == 204

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    list_res_after = client.get("/idea-box/folders/", headers=headers)
    assert len(list_res_after.json()) == 0


# --- –¢–µ—Å—Ç—ã –¥–ª—è –ú–æ–¥—É–ª—è –ò–¥–µ–π (/ideas) ---

def test_create_idea_requires_folder(client: TestClient):
    """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∏ –±–µ–∑ –ø–∞–ø–∫–∏ –¥–æ–ª–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏)."""
    headers = get_auth_headers(client)
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ—é –±–µ–∑ folder_id (—Å—Ö–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    response = client.post("/idea-box/ideas/", json={"title": "Test Idea"}, headers=headers)
    assert response.status_code == 422  # Unprocessable Entity

def test_create_idea_with_new_tags(client: TestClient):
    """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∏ —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —ç—Ç–∏ —Ç–µ–≥–∏."""
    headers = get_auth_headers(client)
    folder_id = create_folder(client, headers, "My Ideas")["id"]
    
    idea_data = {
        "folder_id": folder_id,
        "title": "A new feature",
        "tags": ["feature", "urgent"]
    }
    response = client.post("/idea-box/ideas/", json=idea_data, headers=headers)
    assert response.status_code == 201
    created_idea = response.json()
    tag_names = {tag["name"] for tag in created_idea["tags"]}
    assert tag_names == {"feature", "urgent"}

def test_create_link_idea_mocks_background_task(client: TestClient, mocker):
    """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∏-—Å—Å—ã–ª–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (—Å –º–æ–∫–æ–º)."""
    # –ú–æ–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞ —Ä–µ–∞–ª—å–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å
    mocked_fetch = mocker.patch("src.modules.idea_box.ideas.router.fetch_and_save_metadata", MagicMock())
    
    headers = get_auth_headers(client)
    folder_id = create_folder(client, headers, "Links")["id"]
    
    idea_data = {
        "folder_id": folder_id,
        "idea_type": "link",
        "url": "https://example.com"
    }
    client.post("/idea-box/ideas/", json=idea_data, headers=headers)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
    mocked_fetch.assert_called_once()

def test_master_idea_filtering(client: TestClient):
    """–¢–µ—Å—Ç: —Å–ª–æ–∂–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ GET /ideas."""
    headers = get_auth_headers(client)
    folder_a_id = create_folder(client, headers, "Folder A")["id"]
    folder_b_id = create_folder(client, headers, "Folder B")["id"]

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    client.post("/idea-box/ideas/", json={"folder_id": folder_a_id, "title": "Work task 1", "tags": ["work", "urgent"]}, headers=headers)
    client.post("/idea-box/ideas/", json={"folder_id": folder_a_id, "title": "Work task 2", "tags": ["work"]}, headers=headers)
    client.post("/idea-box/ideas/", json={"folder_id": folder_b_id, "title": "Personal project", "tags": ["personal"]}, headers=headers)

    # 1. –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞–ø–∫–µ
    response = client.get(f"/idea-box/ideas/?folder_id={folder_a_id}", headers=headers)
    assert len(response.json()) == 2

    # 2. –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É (–ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º)
    response = client.get("/idea-box/ideas/?tags=work", headers=headers)
    assert len(response.json()) == 2

    # 3. –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞–ø–∫–µ –∏ —Ç–µ–≥—É
    response = client.get(f"/idea-box/ideas/?folder_id={folder_a_id}&tags=urgent", headers=headers)
    assert len(response.json()) == 1
    assert response.json()[0]["title"] == "Work task 1"

    # 4. –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    response = client.get("/idea-box/ideas/?q=personal", headers=headers)
    assert len(response.json()) == 1
    assert response.json()[0]["title"] == "Personal project"


def test_promote_idea_to_task(client: TestClient):
    """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ "–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ" –∏–¥–µ–∏ –≤ –∑–∞–¥–∞—á—É."""
    headers = get_auth_headers(client)
    folder_id = create_folder(client, headers, "Actionable Ideas")["id"]
    
    # 1. –°–æ–∑–¥–∞–µ–º –∏–¥–µ—é
    idea_res = client.post("/idea-box/ideas/", json={"folder_id": folder_id, "title": "Plan trip"}, headers=headers)
    idea_id = idea_res.json()["id"]

    # 2. –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º
    promote_res = client.post(f"/idea-box/ideas/{idea_id}/promote-to-task", json={"task_title": "Plan the big trip"}, headers=headers)
    assert promote_res.status_code == 201
    task_data = promote_res.json()
    assert task_data["title"] == "Plan the big trip"

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
    tasks_res = client.get("/tasks/")
    assert len(tasks_res.json()) == 1

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
    failed_promote_res = client.post(f"/idea-box/ideas/{idea_id}/promote-to-task", json={"task_title": "Plan again"}, headers=headers)
    assert failed_promote_res.status_code == 409


# --- –¢–µ—Å—Ç—ã –¥–ª—è –ú–æ–¥—É–ª—è –¢–µ–≥–æ–≤ (/tags –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ) ---

def test_get_global_tags(client: TestClient):
    """–¢–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    headers = get_auth_headers(client)
    folder_id = create_folder(client, headers, "Global Tags Test")["id"]
    client.post("/idea-box/ideas/", json={"folder_id": folder_id, "title": "A", "tags": ["work", "urgent"]}, headers=headers)
    client.post("/idea-box/ideas/", json={"folder_id": folder_id, "title": "B", "tags": ["work"]}, headers=headers)

    response = client.get("/idea-box/tags/", headers=headers)
    assert response.status_code == 200
    tags_map = {tag["name"]: tag["idea_count"] for tag in response.json()}
    assert tags_map["work"] == 2
    assert tags_map["urgent"] == 1

def test_get_contextual_tags_in_folder(client: TestClient):
    """–¢–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏."""
    headers = get_auth_headers(client)
    folder_a_id = create_folder(client, headers, "Folder A")["id"]
    folder_b_id = create_folder(client, headers, "Folder B")["id"]

    # –ò–¥–µ–∏ –≤ –ø–∞–ø–∫–µ –ê
    client.post("/idea-box/ideas/", json={"folder_id": folder_a_id, "title": "A1", "tags": ["work", "alpha"]}, headers=headers)
    # –ò–¥–µ–∏ –≤ –ø–∞–ø–∫–µ –ë
    client.post("/idea-box/ideas/", json={"folder_id": folder_b_id, "title": "B1", "tags": ["work", "beta"]}, headers=headers)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞–ø–∫–∏ –ê
    response = client.get(f"/idea-box/folders/{folder_a_id}/tags", headers=headers)
    assert response.status_code == 200
    
    tags_map = {tag["name"]: tag["idea_count"] for tag in response.json()}
    
    # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ 'work' –∏ 'alpha', –∏ 'beta' –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    assert "work" in tags_map
    assert "alpha" in tags_map
    assert "beta" not in tags_map
    assert tags_map["work"] == 1 # –°—á–µ—Ç—á–∏–∫ –¥–ª—è 'work' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, –∞ –Ω–µ 2