"use client";

import { useEffect } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";

import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { IdeaFolder, FolderCreate } from "@/types";

// ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è —Ç–æ, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ —Ñ–æ—Ä–º—ã.
// Zod –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –Ω–µ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.
const formSchema = z.object({
  name: z.string().min(1, "Folder name is required"),
  icon: z.string().optional(), // –ü–æ–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å string –∏–ª–∏ undefined
});

// –¢–∏–ø –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
type FormValues = z.infer<typeof formSchema>;

interface FolderFormProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  // onSubmit –æ–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è API
  onSubmit: (data: FolderCreate) => void; 
  folder?: IdeaFolder | null;
}

export function FolderForm({ isOpen, onOpenChange, onSubmit, folder }: FolderFormProps) {
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: folder?.name || "",
      icon: folder?.icon || "", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ null
    },
  });

  useEffect(() => {
    if (isOpen) {
      form.reset({
        name: folder?.name || "",
        icon: folder?.icon || "",
      });
    }
  }, [folder, isOpen, form]);

  // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
  const handleFormSubmit = (values: FormValues) => {
    const apiPayload: FolderCreate = {
      name: values.name,
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ undefined –≤ null –¥–ª—è API
      icon: values.icon || null, 
    };
    onSubmit(apiPayload);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{folder ? "Edit Folder" : "Create New Folder"}</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          {/* –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É */}
          <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4 py-4">
            <FormField name="name" control={form.control} render={({ field }) => (
              <FormItem>
                <FormLabel>Name</FormLabel>
                <FormControl><Input placeholder="E.g. Project Phoenix" {...field} /></FormControl>
                <FormMessage />
              </FormItem>
            )} />
            <FormField name="icon" control={form.control} render={({ field }) => (
              <FormItem>
                <FormLabel>Icon (e.g. üöÄ)</FormLabel>
                {/* Input value –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null/undefined, –ø–æ—ç—Ç–æ–º—É `?? ''` –æ—Å—Ç–∞–µ—Ç—Å—è */}
                <FormControl><Input placeholder="Enter an emoji or icon name" {...field} value={field.value ?? ''} /></FormControl>
                <FormMessage />
              </FormItem>
            )} />
            <DialogFooter>
              <Button type="submit">Save</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}